// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StuffSwapApi.Models;

#nullable disable

namespace StuffSwapApi.Migrations
{
    [DbContext(typeof(StuffSwapApiContext))]
    [Migration("20230822220753_MakeToolUserTable")]
    partial class MakeToolUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StuffSwapApi.Models.Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToolPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolStatus")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ToolId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            ToolId = 1,
                            ReturnDate = "None",
                            ToolDescription = "A good weedwacker",
                            ToolName = "Weedwacker",
                            ToolPhoto = "www.photo.com/example1.png",
                            ToolStatus = "Available",
                            UserId = 1
                        },
                        new
                        {
                            ToolId = 2,
                            ReturnDate = "None",
                            ToolDescription = "Great gardening tools",
                            ToolName = "Gardening Tools",
                            ToolPhoto = "www.photo.com/example2.png",
                            ToolStatus = "Available",
                            UserId = 2
                        },
                        new
                        {
                            ToolId = 3,
                            ReturnDate = "None",
                            ToolDescription = "A good climbing rope",
                            ToolName = "Rope for rock climbing",
                            ToolPhoto = "www.photo.com/example3.png",
                            ToolStatus = "Available",
                            UserId = 3
                        },
                        new
                        {
                            ToolId = 4,
                            ReturnDate = "None",
                            ToolDescription = "Great Sprinkler",
                            ToolName = "Sprinkler",
                            ToolPhoto = "www.photo.com/example4.png",
                            ToolStatus = "Available",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StuffSwapApi.Models.ToolUser", b =>
                {
                    b.Property<int>("ToolUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ToolUserId");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("ToolUsers");
                });

            modelBuilder.Entity("StuffSwapApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "samplePass",
                            UserName = "sampleUser@gmail.com"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "password",
                            UserName = "taylor@gmail.com"
                        },
                        new
                        {
                            UserId = 3,
                            Password = "password",
                            UserName = "coolguy@gmail.com"
                        });
                });

            modelBuilder.Entity("StuffSwapApi.Models.ToolUser", b =>
                {
                    b.HasOne("StuffSwapApi.Models.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StuffSwapApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
