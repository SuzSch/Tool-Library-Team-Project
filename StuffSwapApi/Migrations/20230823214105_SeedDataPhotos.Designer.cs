// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StuffSwapApi.Models;

#nullable disable

namespace StuffSwapApi.Migrations
{
    [DbContext(typeof(StuffSwapApiContext))]
    [Migration("20230823214105_SeedDataPhotos")]
    partial class SeedDataPhotos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StuffSwapApi.Models.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("longtext");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            UserName = "sampleUser@gmail.com",
                            UserPassword = "samplePass"
                        },
                        new
                        {
                            AppUserId = 2,
                            UserName = "taylor@gmail.com",
                            UserPassword = "password"
                        },
                        new
                        {
                            AppUserId = 3,
                            UserName = "coolguy@gmail.com",
                            UserPassword = "password"
                        });
                });

            modelBuilder.Entity("StuffSwapApi.Models.Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToolPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolStatus")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ToolId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            ToolId = 1,
                            ReturnDate = "None",
                            ToolDescription = "A good weedwacker",
                            ToolName = "Weedwacker",
                            ToolPhoto = "https://sgp1.digitaloceanspaces.com/fluxdigi/yourhousegarden/uploads/FI-best-weed-eater.jpg",
                            ToolStatus = "Available",
                            UserId = 1
                        },
                        new
                        {
                            ToolId = 2,
                            ReturnDate = "None",
                            ToolDescription = "Used Size 7 Rollerskates",
                            ToolName = "Roller Skates",
                            ToolPhoto = "https://s3-media0.fl.yelpcdn.com/bphoto/PBU2rkgpvKUrTVQyug0mfw/o.jpg",
                            ToolStatus = "Available",
                            UserId = 2
                        },
                        new
                        {
                            ToolId = 3,
                            ReturnDate = "None",
                            ToolDescription = "A good climbing rope, only taken a few falls",
                            ToolName = "Rope for rock climbing",
                            ToolPhoto = "www.photo.com/example3.png",
                            ToolStatus = "Available",
                            UserId = 3
                        },
                        new
                        {
                            ToolId = 4,
                            ReturnDate = "None",
                            ToolDescription = "Kitchen Mixer with all attachemnts",
                            ToolName = "Kitchen Mixer",
                            ToolPhoto = "https://i.ebayimg.com/images/g/vZ4AAOSwSm5f90tw/s-l500.jpg",
                            ToolStatus = "Available",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StuffSwapApi.Models.ToolUser", b =>
                {
                    b.Property<int>("ToolUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("ToolUserId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolUsers");
                });

            modelBuilder.Entity("StuffSwapApi.Models.ToolUser", b =>
                {
                    b.HasOne("StuffSwapApi.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StuffSwapApi.Models.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
